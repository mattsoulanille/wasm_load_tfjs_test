load("@emsdk//emscripten_toolchain:wasm_rules.bzl", "wasm_cc_binary")
load("@build_bazel_rules_nodejs//:index.bzl", "js_library")
load("@npm//@bazel/concatjs:index.bzl", "ts_library")


package(default_visibility = ["//visibility:public"])

filegroup(
    name = "cc_srcs",
    srcs = glob(["*.cc"]),
)

js_library(
    name = "load_with_proxy",
    srcs = [
        "load_with_proxy.js",
    ],
)

cc_binary(
    name = "main",
    srcs = [
        "main.cc",
        "thread_utils.h",
    ],
    # additional_linker_inputs = [
    #     "load_with_proxy.js",
    # ],
    deps = [
        "load_with_proxy.js.lds",
    ],
    copts = [
        "-g3",
        "-gsource-map",
        "-pthread",
    ],
    linkopts = [
        #"-s MODULARIZE=1",
        #"-s EXPORT_NAME='MainWasm'", # This option breaks pthreads by renaming 'Module' to whatever is set here, but main.worker.js always assumes it's 'Module'.
        #"-s ASYNCIFY",
        #"-s ASYNCIFY_IGNORE_INDIRECT",
        #"-s ASYNCIFY_IMPORTS=",
        #"-s ASYNCIFY_ADVISE",
        "-s EXPORTED_FUNCTIONS=_emscripten_proxy_finish,_main",
        "-s USE_PTHREADS",
        "-pthread",
        #"-s PTHREAD_POOL_SIZE=2",
        "-s PTHREAD_POOL_SIZE_STRICT=0",
        "-s PROXY_TO_PTHREAD",
        "-g3",
        "-gsource-map",
        "--js-library $(location load_with_proxy.js.lds)",
   ],
)

wasm_cc_binary(
    name = "main_wasm",
    cc_target = ":main",
)

js_library(
    name = "main_lib",
    srcs = [
        ":main_wasm",
        "index.js",
        "index.d.ts",
    ],
    package_name = "main_wasm",
)
